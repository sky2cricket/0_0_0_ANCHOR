#!/usr/bin/perl

#translate
###cp translate translate.txt

use Encode 'from_to';
use Encode;
use charnames ':full';
#use Test::utf8;
#use utf8::is_utf8  need later version of perl
  
# this one to parse through a file containing &x0000; (hex) form unicode
# translate those to characters
# and write the file also with it as form \x{0000} 
# for other tests.

$infile = "./mods/0015_000060_000227_0000.xml";
$outfile1 = "./15_60_227char";
$outfile2 = "./15_60_227hex";

  
#http://perldoc.perl.org/perluniintro.html

print " smiley?  ".  chr(0x263a)."\n";
$_ = "0x263a";
$c = chr();
print " smiley?  $c\n";
$line = " from Si\x{2088}; O\x{2082}\x{2080} (SnMe\x{2083}; )\x{2088} and their olefin polymerization activity";
binmode STDOUT, ":utf8";
print $line."\n\n";

$val = is_valid_string($line);
print "$val\n";
#print "that was validity, now sanity:\n";
#is_sane_utf8($line);
#print " just ran is_sane_utf8 on this line: \n$line\n";
#is_flagged_utf8($line, $val);
#print "flagged utf8?  $val\n";

$name = "yes";
Encode::is_utf8($line,$name);
print "flagged utf8?  $name\n";

# following gives wide character error
#print " next, running from_to and retesting\n";
#from_to ($line, "iso-8859-1", "utf-8"); # from latin-1 to utf-8
#print "$line\n\n";
print " next, running utf8_on that line, and testing again\n";
Encode::_utf8_on($line);
print "-->$line<--\n\n";
$val = is_valid_string($line);
print "valid string? $val\n";
is_flagged_utf8($line, $val);
print "flagged utf8?  $val\n";


is_sane_utf8($line);

#print "result1 = $result; result2 = $result2;\n$line\n";

#from_to($data, "iso-8859-1", "utf-8"); # from latin-1 to utf-8
#print $line."\n";
#$a = encode("utf8",$line, 1);
print "this is either double or triple encoded:\n $1\n\n";

#$huh = is_utf8($line, 1);
#print "huh is $huh\n encode returned $a\n";
#from_to($line,  "iso-8859-1", "utf-8");
#print $line."\n";
#exit;

open (IN, $infile) or die "can't open $infile\n";
open (CHAR, ">:utf8", $outfile1) or die "can't open $outfile1\n";
open (HEX, ">".$outfile2) or die "can't open $outfile2\n";
while ($line = <IN>){
   $charline = $line;

   print "tests on string with hex encoding:\n";
   $val = is_valid_string($line);
   print "Valid string? $val\n";

   $name = "yes";
   Encode::is_utf8($line,$name);
   print "flagged utf8?  $name\n";

   $line =~ s,\&\#x([A-Za-z0-9]{3\,5} *)\;,\\x\{\1\},g;
   print HEX $line;

   print "tests on string with \\x{num} encoding:\n";
   $val = is_valid_string($line);
   print "Valid string? $val\n";

   $name = "yes";
   Encode::is_utf8($line,$name);
   print "flagged utf8?  $name\n";

   while ($charline =~ /(.*?)\&\#x([A-Za-z0-9]{3\,5})\;(.*)/){
     $val = "0x".$2;
    # print "$val changing to ".chr($val)."\n";
#     print "$val changing to ".pack("U", $val)."\n";
     $charline = "$1".pack("U0C*", $val)."$3";
     } 
   print CHAR $charline;
   print "tests on string after packing:\n";
   $val = is_valid_string($charline);
   print "Valid string? $val\n";

   $name = "yes";
   Encode::is_utf8($charline,$name);
   print "flagged utf8?  $name\n";

  # print CHAR $line;
  # print $line;
   is_valid_string($charline);
   }
close(IN);
close(HEX);
close(CHAR);


#To create Unicode characters in literals for code points above 0xFF ,
#use the \x{...}  notation in double-quoted strings:

#    my $smiley = "\x{263a}";

#  my $georgian_an  = pack("U", 0x10a0);
#Note that both \x{...}  and \N{...}  are compile-time string constants:
# you cannot use variables in them. if you want similar run-time functionality,
# use chr() and charnames::vianame() .

 #my $hebrew_alef = chr(0x05d0);
#You can also use the charnames pragma to invoke characters by name in double-quoted strings:

 #   use charnames ':full';
 #   my $arabic_alef = "\N{ARABIC LETTER ALEF}";

#Naturally, ord() will do the reverse: it turns a character into a code point.

#Note that \x.. (no {} and only two hexadecimal digits), \x{...} , and chr(...)
#for arguments less than 0x100 (decimal 256) generate an eight-bit character
#for backward compatibility with older Perls. For arguments of 0x100 or more,
#Unicode characters are always produced. If you want to force the production of
 #Unicode characters regardless of the numeric value, use pack("U", ...) instead
#of \x.. , \x{...} , or chr().
   

#If you want to force the result to Unicode characters, use the special "U0" prefix.
# It consumes no arguments but forces the result to be in Unicode characters, instead of bytes.
   
#   my $chars = pack("U0C*", 0x80, 0x42);

#Likewise, you can force the result to be bytes by using the special "C0" prefix.

#chr

#Returns the character represented by that NUMBER in the character set. For example,
#chr(65) is "A" in either ASCII or Unicode, and chr(0x263a) is a Unicode smiley face.
#Note that characters from 128 to 255 (inclusive) are by default not encoded in UTF-8
#Unicode for backward compatibility reasons (but see encoding).
#If NUMBER is omitted, uses $_ .
#For the reverse, use ord.

#ord
#Returns the numeric (the native 8-bit encoding, like ASCII or EBCDIC, or Unicode)
#value of the first character of EXPR. If EXPR is omitted, uses $_ .
 
sub is_sane_utf8($;$) 
{
  my $string = shift;
  my $name   = shift || "sane utf8";

  # regexp in scalar context with 'g', meaning this loop will run for
  # each match.  Should only have to run it once, but will redo if
  # the failing case turns out to be allowed in %allowed.
  while ($string =~ /($re_bit)/o)
  {
    # work out what the double encoded string was
    my $bytes = $1;

    my $index = $+[0] - length($bytes);
    my $codes = join '', map { sprintf '<%00x>', ord($_) } split //, $bytes;

    # what charecter does that represent?
    my $char = Encode::decode("utf8",$bytes);
    my $ord  = ord($char);
    my $hex  = sprintf '%00x', $ord;
    $char = charnames::viacode($ord);

    # print out diagnostic messages
    #fail($name);
    print " I failed!  $name\n";
    print qq{Found dodgy chars "$codes" at char $index\n};
  #  diag(qq{Found dodgy chars "$codes" at char $index\n});
    if (Encode::is_utf8($string))
   #   { diag("Chars in utf8 string look like utf8 byte sequence.") }
      { print "Chars in utf8 string look like utf8 byte sequence.\n";}
    else
     #: { diag("String not flagged as utf8...was it meant to be?\n") }
      {print "String not flagged as utf8...was it meant to be?\n";}

    print "Probably originally a $char char - codepoint $ord (dec), $hex (hex)\n";
#    diag("Probably originally a $char char - codepoint $ord (dec), $hex (hex)\n");

    return 0;
  }

  # got this far, must have passed.
  ok(1,$name);
  return 1;
}
sub is_valid_string($;$)
{   
  my $string = shift;
  my $name = shift || "valid string test";
    
  # check we're a utf8 string - if not, we pass. 
#  unless (Encode::is_utf8($string))
   # { return pass($name) }
#     {return "NOPE!\n"; }
 # if (!(Encode::is_utf8($string))) {return "NOT UTF8\n";}
    
  # work out at what byte (if any) we have an invalid byte sequence
  # and return the correct test result
  my $pos = _invalid_sequence_at_byte($string);
  #ok(!defined($pos), $name)
  #  or diag("malformed byte sequence starting at byte $pos");
  if ($pos){ return "malformed byte sequence starting at byte $pos\n";}
  else{ return "yes!\n";}
}   
   
sub _invalid_sequence_at_byte($)
{   
  my $string = shift;
      
  # examine the bytes that make up the string (not the chars)
  # by turning off the utf8 flag (no, use bytes doens't 
  # work, we're dealing with a regexp) 
  Encode::_utf8_off($string);
    
  # work out the index of the first non matching byte
  my $result = $string =~ m/^($valid_utf8_regexp)*/ogx;
  
  # if we matched all the string return the empty list
  my $pos = pos $string || 0;
  return if $pos == length($string);

  # otherwise return the position we found
    return $pos
}
sub is_flagged_utf8
{
  my $string = shift;
  my $name = shift || "flagged as utf8";
#  return ok(Encode::is_utf8($string),$name);

}

sub isnt_flagged_utf8($;$)
{
  my $string = shift;
  my $name   = shift || "not flagged as utf8";
 # return ok(!Encode::is_utf8($string), $name);
}

                                              