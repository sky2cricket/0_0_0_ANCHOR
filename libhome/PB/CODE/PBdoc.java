//file: PBdoc.java
//============================================================
//Introduction to Class PBdoc=================================
//copyright Cricket Haygood Deane, 1998=======================
/*============================================================

The class PBdoc is the Documentation Window.

This class is called by class PBinit in response to a
mouse-click event on the active Button Docs.  This will
create PBdoc window instance "Documentation Window I".

This class is also called by class PBconstr in response 
to a mouse-click event on the active Button Docs.  This 
will create PBdoc window instance "Documentation Window II".

This window is very simple.

It has one Choice button:  DocChoice.
It has one TextArea:       WhitePaperDisplay.
It has one active Button:  Bquit.

Button Bquit
The response to clicking on the Bquit Button is
to invoke the Termination Window, where the user
decides whether or not to quit PacketBuilder.

Choice DocChoice 
The response to clicking on DocChoice is a
drop down list (JAVA Choice itemlist) that
shows ten topics.  To select a topic, drag
the mouse down the list and click again. 
             
 1.  Introduction    
 2.  About PacketBuilder
 3.  Step-by-step Instructions
 4.  Application Layer Documentation
 5.  Transport Layer Documentation
 6.  IP Layer Documentation
 7.  Logical Link Control Documentation
 8.  Media Access Control Documentation
 9.  Bibliography
10.  Acknowlegements

TextArea WhitePaperDisplay:

The topic selected by the DocChoice button is displayed 
in the TextArea WhitePaperDisplay.  The coding for each 
topic is simple. Each is just a single String object. 
============================================================*/

import java.awt.*;
import java.awt.event.*;
import java.applet.Applet;

public class PBdoc extends Frame implements  ActionListener{

        private  PBquit PacketBuilderQuit;
	TextArea WhitePaper = new TextArea("WhitePaper TextArea",28,72,0);

    //===============================================================
    //This use of base class constructor adapted from
    //Deitel and Deitel, 1997, page 602
    public PBdoc (String NameForThisWindow ) {
	//call base class constructor(D&Dpage  603)
	  super(NameForThisWindow);
          setSize(1000,850);//width,height

	//add WindowCloser since Frame has no 
        //automatic window closing
	  addWindowListener(new CloseWindow());

        Color pearl = new Color (201,216,255); 
        Color cwhite = new Color(255,255,255);
        Color cdarkblue= new Color(0,0,90);
    
        //===============================================================
        //Build Header Panel.
        Panel Phdr = new Panel();
	Phdr.setLayout(new FlowLayout(0,9,9));
	Font f20=new Font("Monospaced",Font.BOLD,20);//prefer BOLD,10
        Phdr.setBackground(pearl);
     
        //===============================================================
        //Build TITLE Button.
        Button TITLE = new Button  
               (" PacketBuilder by Cricket Haygood Deane "
               +"Copyright 1998                 ");
	       TITLE.setBackground(cdarkblue);
               TITLE.setForeground(cwhite);
               TITLE.setFont(f20); 

        //===============================================================
        //Build Choice List.
        Choice DocChoice = new Choice();
               DocChoice.setBackground(cdarkblue);
               DocChoice.setForeground(cwhite);
               DocChoice.setFont(f20);
               DocChoice.add("Click here to select "
                            +"a documentation page.");
               DocChoice.add("About PacketBuilder");
               DocChoice.add("Step-by-step Instructions");
               DocChoice.add("Application Layer Documentation");
               DocChoice.add("Transport Layer Documentation");
               DocChoice.add("IP Layer Documentation");
               DocChoice.add("Logical Link Control Documentation");
               DocChoice.add("Media Access Control Documentation");
               DocChoice.add("Bibliography");
               DocChoice.add("Acknowlegements");
   

        //===============================================================
        //Build Quit Button
        Button Bquit = new Button(" Quit ");
        Bquit.setBackground(cdarkblue);
        Bquit.setForeground(cwhite);
        Bquit.setFont(f20);
        Bquit.addActionListener(this);

        //===============================================================
        //Build WhitePaper TextArea.

        //Initial text 
        //INTRO must be defined before the statement:
        //WhitePaper.setText(INTRO); 
        //or the setText method will fail. 

        String INTRO = new String
 ( "      "
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n                           PacketBuilder "
 +"\n                                by "
 +"\n                       Cricket Haygood Deane"
 +"\n                          copyright 1998"
 +"\n"
 +"\n                     Project In Lieu Of Thesis"
 +"\n                      Submitted July 23, 1998"
 +"\n                                to"
 +"\n                The Department of Computer Science"         
 +"\n                University of Tennessee, Knoxville"
 +"\n"
 +"\n"
 +"\n                Committee: Dr. David Straight (chair)  "
 +"\n                           Dr. Micah Beck"
 +"\n                           Dr. Jim Plank"
 +"\n"
+"\n "
+"\n "
+"\n "
+"\n ");
                         
                   
	TextArea WhitePaper = new TextArea("WhitePaper TextArea",28,72,0);
	         WhitePaper.setBackground(cwhite);
	         WhitePaper.setEditable(false);
                 WhitePaper.setFont(f20); 
                 WhitePaper.setText(INTRO); 
      
        //===============================================================
        //Now that everything is defined, add the ItemListener.
        DocChoice.addItemListener
                 (new setWhitePaperDisplay(WhitePaper,INTRO));


        //===============================================================
        //Build the display.
      
        Phdr.add(TITLE);
        Phdr.add(DocChoice);
        Phdr.add(Bquit);
        Phdr.add(WhitePaper);

        add(Phdr);
        //===============================================================
       
        //define PacketBuilderQuit PBquit object 
        PacketBuilderQuit = new PBquit 
                ("PacketBuilder Termination Window       ");

}//end constructor for PBdoc

//==========================================================
//==========================================================

   public void actionPerformed (ActionEvent e) {
   // response to quit button 

	String s = e.getActionCommand();

        if(s.equals(" Quit ")) 
           PacketBuilderQuit.setVisible(true);

        }
//============================================================

public class  setWhitePaperDisplay implements ItemListener {
    	

	TextArea whitepaper;
        String   intro;

        //constructor for setWhitePaperDisplay
	public setWhitePaperDisplay (TextArea WhitePaper, String INTRO) {


        whitepaper = WhitePaper;
        intro = INTRO;

        }// end constructor


	public void itemStateChanged (ItemEvent e) {
      		Choice choice = (Choice) e.getItemSelectable();
                int index = choice.getSelectedIndex();

        String instr = new String
( " PacketBuilder by Cricket Haygood Deane Copyright 1998."
+"\n "
+"\n Use PacketBuilder to see what an internet packet looks like."
+"\n You will build the simplest type of packet that is sent from "
+"\n one transport layer socket to another.  All internet switched"
+"\n packets operate on the same basic principles as these simple" 
+"\n packets.  The source hosts for PacketBuilder are hosts in the "
+"\n Hydra Lab.  IP and ethernet addresses were obtained using the"  
+"\n 'arp' command.  The network gateway address was obtained with"
+"\n the 'netstat -r' command.  (June 1998)" 
+"\n "   
+"\n Step-by-step Instructions."
+"\n "
+"\n Step 1. Select a source host and a destination host.  Note "
+"\n         that if you select the same host for both, the loopback"
+"\n         address will appear as the destination ip address.  And"
+"\n         if you select an address outside the Hydra Lab, the "
+"\n         network gateway address will appear as the destination"
+"\n         ethernet address." 
+"\n "
+"\n Step 2. Select ports for host and destination."
+"\n "
+"\n Step 3. Select a user message."
+"\n "
+"\n Step 4. Select a transport layer protocol.  Note that there"
+"\n         are flags and other options, if you choose tcp."
+"\n "
+"\n Step 5. Select an internet (ip) layer protocol."
+"\n         Note different flags for ipv4 and ipv6."
+"\n "
+"\n Step 6. Select a Logical Link Control for the Datalink Layer."
+"\n "
+"\n Step 7. Select a Media Access Control for the Datalink Layer."
+"\n "
+"\n Step 8. Click on Checksum Bar to perform checksum on all layers."
+"\n "
+"\n Step 9. View the packet you have assembled in the panel at "
+"\n         bottom of your PacketBuilder Screen."  
+"\n "
+"\n Step 10. Build another packet with different protocols. Enjoy."
+"\n "
+"\n "
+"\n "
+"\n "
+"\n "
+"\n "
+"\n "
+"\n "
+"\n End"
+"\n ");
                         
        String s5 = new String
( "Application Layer Documentation"
 +"\n"
 +"\nThere are a great number of applications available to utilize"
 +"\nInternet packets.  All operate above the Transport Layer and"
 +"\nsend results (application layer data) to the Transport Layer "
 +"\nvia the appropriate port number.  An example of an application"
 +"\nis FTP (file transfer protocol), which can deliver data from one"
 +"\nhost to another through a TCP socket connection on port number 20."
 +"\nFTP control messages go through a second socket connection on"
 +"\nport number 21."     
 +"\n"
 +"\nIn the early 80's, the designers of protocols envisioned an" 
 +"\norderly set of layers and software which operated inside of"
 +"\nfixed boundaries.  The illustration below is lifted from "
 +"\nRFC 791 September, 1981.  The applications shown are Telnet,"
 +"\nFTP, and TFTP.  Note that FTP uses TCP as its transport protocol"
 +"\nand TFTP uses UDP as its transport protocol."
 +"\n"
 +"\n   +------+ +-----+ +-----+     +-----+"
 +"\n   |Telnet| | FTP | | TFTP| ... | ... |"
 +"\n   +------+ +-----+ +-----+     +-----+"
 +"\n         |   |         |           |   "
 +"\n        +-----+     +-----+     +-----+"
 +"\n        | TCP |     | UDP | ... | ... |"
 +"\n        +-----+     +-----+     +-----+"
 +"\n           |           |           |   "
 +"\n        +--------------------------+----+"
 +"\n        |    Internet Protocol & ICMP   |"
 +"\n        +--------------------------+----+"
 +"\n                       |                 "
 +"\n          +---------------------------+"
 +"\n          |   Local Network Protocol  |"
 +"\n          +---------------------------+"
 +"\n"
 +"\n             Protocol Relationships"
 +"\n"
 +"\n                 Figure 1."
 +"\n"
 +"\nToday, the traditional protocol relationships still hold,"
 +"\nalthough sometimes the rules are bent to make things run"
 +"\nfaster. Any program which operates above the Transport Layer "
 +"\nand uses sockets can be considered as Application Layer  "
 +"\nsoftware. The two lines of code shown below are the read and"
 +"\nwrite statements for a tcp socket in a C program."
 +"\n"
 +"\nwrite(FD,\"Hello PacketBuilder\",sizeof(\"Hello PacketBuilder\"));"
 +"\nread(FD,BUFF,sizeof(BUFF));"
 +"\n"
 +"\nThe variable FD is the file descriptor for the tcp socket.  The"
 +"\nvariable BUFF is a block of memory space set aside to store data"
 +"\nthat arrives on a socket.  For a comprehensive discussion of"
 +"\nsocket programming, see Dr. Plank's website at:"
 +"\n"
 +"\n          http://www.cs.utk.edu/~plank"
 +"\n"
 +"\nThe simple \"Hello PacketBuilder\" message shown above will travel from"
 +"\nthe sending host to the receiving host along a tcp socket connection."
 +"\nThe \"Hello PacketBuilder\" string will be passed DOWN the layers of the"
 +"\nsending host, gaining a tcp header, an ip header, a logical link"
 +"\ncontrol header, and a medium access control header and trailer before "
 +"\nbeing issued by the sending host to the network.  At the receiving"
 +"\nhost, the process takes place in reverse order, with a header being"
 +"\nstripped off at each layer until finally the application layer (the"
 +"\nc program) is reached and the short message \"Hello PacketBuilder\" "
 +"\non the receiving screen." 
 +"\n"
 +"\nThis Hello PacketBuilder data packet sent from one host to another "
 +"\nis the same as the packet built with PacketBuilder.  Host addresses "
 +"\nand port numbers may be different, but the format and the "
 +"\nencapsulation will be exactly the same.  "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");
        String s4 = new String
 ( "Transport Layer Documentation"
 +"\n"
 +"\nThe transport layer packet consists of two parts:"
 +"\n"
 +"\n    1. Transport Layer Header"
 +"\n    2. Application Layer Data"
 +"\n"
 +"\nThe illustration below is adapted from RFC 1122, October 1989" 
 +"\n"
 +"\n              _______________________________  "
 +"\n             |  Transport | Application Data | "
 +"\n             |  header    |                  | " 
 +"\n             |____________|__________________| "
 +"\n"
 +"\n             <----------- Segment -----------> "
 +"\n"
 +"\nIn RFC 1122, the author suggests that the term segment (or message)"
 +"\nbe used for the Transport Layer encapsulation unit.  Many publications"
 +"\nuse the terms \"tcp packet\" and \"udp packet\".  The important thing"
 +"\nto remember is that the Transport Layer constructs a communication"
 +"\nunit consisting of the two parts shown above."
 +"\n"
 +"\n"
 +"\nPacketBuilder provides 2 choices of Transport Layer Protocol: "
 +"\n"
 +"\n      TCP (Transport Control Protocol)"
 +"\n      UDP (User Datagram Protocol) "
 +"\n"
 +"\nBoth of these protocols are widely used today.  "
 +"\n"
 +"\n===================TCP HEADER=========================================="
 +"\n"
 +"\n This is the specification for the TCP header "
 +"\n as published in RFC 793, September 1981."
 +"\n"
 +"\n 0                   1                   2                   3   "
 +"\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 "
 +"\n"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |          Source Port          |       Destination Port        |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                        Sequence Number                        |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                    Acknowledgment Number                      |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |  Data |           |U|A|P|R|S|F|                               |"
 +"\n | Offset| Reserved  |R|C|S|S|Y|I|            Window             |"
 +"\n |       |           |G|K|H|T|N|N|                               |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |           Checksum            |         Urgent Pointer        |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                    Options**                  |    Padding**  |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                                                               |"
 +"\n |                   data octets                                 |"
 +"\n |                                                               |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n"
 +"\n**an optional field"
 +"\n"
 +"\nPacketBuilder presents the required header fields (all fields"
 +"\nexcept options and padding) in the scroll pane at the bottom of"
 +"\nthe construction window.  Scroll through the sub-panel for the"
 +"\ntransport layer (the panel that matches the transport layer"
 +"\ncolor, turquoise blue)."
 +"\n"
 +"\nDefinitions for components of the tcp header are listed below."
 +"\n"
 +"\n   Source port:            the port number for the source host"
 +"\n"
 +"\n   Destination port:       the port number for the destination host"
 +"\n"
 +"\n   Sequence number:        numerical id for current packet"
 +"\n"
 +"\n   Acknowlegement number:  numerical id for previous packet"
 +"\n"
 +"\n   Data Offset:            the number of 32 bit words in the tcp header "
 +"\n                           For header without option fields, "
 +"\n                           the value of Data Offset = 5 (0101)" 
 +"\n"
 +"\n   Reserved:               6 bits reserved for future use"
 +"\n"
 +"\n   One Bit TCP Flags:      6 one bit flags: URG, ACK, PSH, RST, SYN, FIN"
 +"\n                           Set flag=1 to enable.  Set flag=0 to disable."
 +"\n"
 +"\n         URG:  urgent bit, urg=1 means the urgent data pointer is on"
 +"\n         ACK:  acknowlegment bit, ack=1 means acknowlegment field is on"
 +"\n         PSH:  push bit, psh=1 is notification from the sender to the  "
 +"\n               receiver to clear buffers " 
 +"\n         RST:  reset bit, rst=1 means reset the connection"
 +"\n         SYN:  synchronization bit, syn=1 means this packet is part of "
 +"\n               the opening handshake to establish connection"
 +"\n         FIN:  finish bit, fin=1 means this is the end of data"
 +"\n"
 +"\n         A note about TCP Flags: It is not valid to set SYN=1 and FIN=1"
 +"\n         in the same Packet.  See RFC 793 for a complete discussion "
 +"\n         of TCP Flags. "
 +"\n"
 +"\n"
 +"\n   Window:                 number of bytes allowed to be in a packet"
 +"\n"
 +"\n   Checksum:               a 16 bit checksum on entire packet "
 +"\n                           plus IP pseudo header (see udp checksum)"
 +"\n"
 +"\n   Urgent Pointer:         location of first byte of urgent data "
 +"\n"
 +"\n   Options:                optional control fields, supplied by user"
 +"\n                           Options are not used by PacketBuilder"
 +"\n"
 +"\n   Padding:                automatic padding to make header length be"
 +"\n                           0mod32 bits, since Data Offset is expressed"   
 +"\n                           as the number of 32 bit words in the header."
 +"\n"
 +"\n   Data octets:            user data from application layer"
 +"\n"
 +"\n"
 +"\n===================UDP HEADER=========================================="
 +"\n"
 +"\n The illustration below is adapted from the specification for the UDP  "
 +"\n header as published in RFC 768, August 1980."
 +"\n"
 +"\n 0                   1                   2                   3   "
 +"\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 "
 +"\n"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |          Source Port          |       Destination Port        |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |            Length             |         Checksum**            |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                                                               |"
 +"\n |                          data octets                          |"
 +"\n |                                                               |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n"
 +"\n**UDP checksum is an optional field"
 +"\n"
 +"\nDefinitions for components of the udp header are listed below."
 +"\n"
 +"\n   Source port:            the port number for the source host"
 +"\n"
 +"\n   Destination port:       the port number for the destination host"
 +"\n"
 +"\n   Length:                 length in octets of udp-header + udp-data"
 +"\n                           (udp-packet length must be a multiple of 2)"
 +"\n"
 +"\n   Checksum:               a 16 bit checksum on entire packet" 
 +"\n                           plus IP pseudo header (see below)"
 +"\n"
 +"\nBecause UDP packets must have a length that is a multiple of 2 octets,"
 +"\nUDP software must have the ability to detect the number of data octets"
 +"\nand pad the data out if necessary.  The minimum length of a UDP-packet"
 +"\nis 8 octets, the length of the header by itself."    
 +"\n"
 +"\n===================IP-PSEUDO-HEADER===================================="
 +"\n"
 +"\nThe IP-pseudo-header is a header calculated at the transport level"
 +"\nto check for IP address errors.  The illustration below is adapted "
 +"\nfrom RFC 793, which contains excellent documentation on the reasons "
 +"\nfor using the IP-pseudo-header."
 +"\n"
 +"\n           +--------+--------+--------+--------+  "
 +"\n           |           Source Address          |  "
 +"\n           +--------+--------+--------+--------+  "
 +"\n           |         Destination Address       |  "
 +"\n           +--------+--------+--------+--------+  "
 +"\n           |  zero  |  PTCL  |    TCP Length   |  "
 +"\n           |        |        | or UDP Length   |  "
 +"\n           +--------+--------+--------+--------+  "
 +"\n"
 +"\n   Source address:       the 32 bit IP source address"
 +"\n   Destination address:  the 32 bit IP destination address"
 +"\n   zero:                 8-bit padding (\"00000000\") "
 +"\n   PTCL:                 the 8 bit IP protocol field"
 +"\n   TCP Length:           16 bit length of tcp hdr + user data"
 +"\n                         TCP Length  does not include "
 +"\n                         the length of the IP-pseudo-header" 
 +"\n   UDP Length:           16 bit length of udp hdr + user data "
 +"\n                         + 1 if user data length is odd number "
 +"\n                         (udp requires an even number of octets)"
 +"\n                         UDP Length  does not include "
 +"\n                         the length of the IP-pseudo-header" 
 +"\n"
 +"\n"    
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");

        String s3 = new String
 ( "IP Layer Documentation"
 +"\n"
 +"\nThe illustration below comes from RFC 1122 and shows the "
 +"\nrelationship between the IP header and the message it encapsulates.  "
 +"\n"
 +"\n               ______________________________________   "
 +"\n              | IP hdr | transport| Application Data |  "
 +"\n              |________|____hdr___|__________________|  "
 +"\n"
 +"\n               <--------  Datagram ------------------>  "
 +"\n                        <-------- Message ----------->  "
 +"\n"
 +"\n"
 +"\nPacketBuilder provides 2 choices of IP Layer Protocol: "
 +"\n"
 +"\n      IPv4(Internet Protocol version 4)"
 +"\n      IPv6(Internet Protocol version 6)"
 +"\n"
 +"\n==================IPv4 HEADER=========================================="
 +"\n This is the specification for the IPv4 header "
 +"\n as published in RFC 791, September 1981."
 +"\n"
 +"\n 0                   1                   2                   3"
 +"\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |Version|  IHL  |Type of Service|          Total Length         |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |         Identification        |Flags|      Fragment Offset    |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |  Time to Live |    Protocol   |         Header Checksum       |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                       Source Address                          |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                    Destination Address                        |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                    Options                    |    Padding    |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n |                                                               |"
 +"\n |                   data octets                                 |"
 +"\n |                                                               |"
 +"\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
 +"\n"
 +"\n"
 +"\nIP stands for Internet Protocol."
 +"\n"
 +"\nDefinitions for components of the IPv4 header are listed below."
 +"\nThese are taken directly from RFC 791, September 1981." 
 +"\n"
 +"\n   Version:                indicates the version of ip header "
 +"\n                           used in this datagram (ipv4: 0100)  "
 +"\n"
 +"\n   IHL:                    internet header length, measured in 32 bit"
 +"\n                           words.  Minimum correct value = 5 (0101). "  
 +"\n"
 +"\n   Type of Service:        This is a set of flags that set service   "
 +"\n                           parameters.  See details below. "
 +"\n"
 +"\n                 Bits 0-2:  Precedence.                                  "
 +"\n                 Bit    3:  0 = Normal Delay,      1 = Low Delay.        "
 +"\n                 Bits   4:  0 = Normal Throughput, 1 = High Throughput.  "
 +"\n                 Bits   5:  0 = Normal Relibility, 1 = High Relibility.  "
 +"\n                 Bit  6-7:  Reserved for Future Use.                     "
 +"\n"
 +"\n                    0     1     2     3     4     5     6     7    "
 +"\n                 +-----+-----+-----+-----+-----+-----+-----+-----+ "
 +"\n                 |                 |     |     |     |     |     | "
 +"\n                 |   PRECEDENCE    |  D  |  T  |  R  |  0  |  0  | "
 +"\n                 |                 |     |     |     |     |     | "
 +"\n                 +-----+-----+-----+-----+-----+-----+-----+-----+ "
 +"\n"
 +"\n                     Precedence:"       
 +"\n" 
 +"\n                     111 - Network Control           011 - Flash "
 +"\n                     110 - Internetwork Control      010 - Immediate"
 +"\n                     101 - CRITIC/ECP                001 - Priority " 
 +"\n                     100 - Flash Override            000 - Routine "  
 +"\n" 
 +"\n   Total Length:           The length of ip datagram in octets,  "
 +"\n                           including ip header and data. " 
 +"\n                           maximum length: 65,535 octets"
 +"\n                           minimum length: 46 octets "
 +"\n                           All IP hosts are required to be able to"
 +"\n                           accept datagrams of length 576 octets." 
 +"\n"
 +"\n   Identification:         An identifying value assigned by the sender "
 +"\n                           to aid in reassembling datagram fragments."
 +"\n"
 +"\n   Flags:                  3 one-bit Control flags."  
 +"\n"
 +"\n                     Bit 0: reserved, must be zero"
 +"\n                     Bit 1: (DF) 0 = May Fragment,  1 = Don't Fragment."
 +"\n                     Bit 2: (MF) 0 = Last Fragment, 1 = More Fragments."
 +"\n" 
 +"\n                                    0   1   2"
 +"\n                                    +---+---+---+ "
 +"\n                                    |   | D | M | "
 +"\n                                    | 0 | F | F | "
 +"\n                                    +---+---+---+ "
 +"\n"
 +"\n   Fragment Offset:        indicates location of fragment carried by "
 +"\n                           this packet. The fragment offset is measured"
 +"\n                           in units of 8 octets (64 bits).  "
 +"\n                           A first fragment has offset zero."
 +"\n"
 +"\n   Time to Live:           the number of hops left before a packet is"
 +"\n                           discarded"
 +"\n"
 +"\n   Protocol:               this field identifies the transport layer" 
 +"\n                           protocol"
 +"\n"
 +"\n   Header Checksum:        a 16 bit checksum on the header only"
 +"\n"
 +"\n   Source address:         the 32-bit IPv4 address for the source host"
 +"\n                           (more about IP addresses below)"
 +"\n"
 +"\n   Destination address:    the 32-bit IPv4 address for the destination"
 +"\n                           host (more about IP addresses below)"
 +"\n"
 +"\n   Options:                PacketBuilder constructs a packet that does "
 +"\n                           not contain any IP options.  IP packets are"
 +"\n                           not required to use options.  But an IP"
 +"\n                           implementation is required to be able to "
 +"\n                           service all options.  To quote directly "
 +"\n                           from RFC 791: "
 +"\n"
 +"\n                  \"The options may appear or not in datagrams.  They" 
 +"\n                   must be implemented by all IP modules (host and" 
 +"\n                   gateways).  What is optional is their transmission in" 
 +"\n                   any particular datagram, not their implementation.\" "
 +"\n                   RFC 791 provides a detailed explanation of the IP" 
 +"\n                   options available in 1981.  New and improved IP" 
 +"\n                   options are described in more recent RFCs. "
 +"\n"
 +"\n   Padding:                padding ensures that the IP header ends on a"   
 +"\n                           32 bit boundary.  The padding is zero. "
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n==================IPv6 HEADER=========================================="
 +"\n"
 +"\n This is the specification for the IPv6 header "
 +"\n as published in RFC 1752, January 1995."
 +"\n"
 +"\n  0                   1                   2                   3"
 +"\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1"
 +"\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  "
 +"\n  |Version|                       Flow Label                      |  "
 +"\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  "
 +"\n  |         Payload Length        |  Next Header  |   Hop Limit   |  "
 +"\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  "
 +"\n  |                                                               |  "
 +"\n  +                                                               +  "
 +"\n  |                                                               |  "
 +"\n  +                         Source Address                        +  "
 +"\n  |                                                               |  "
 +"\n  +                                                               +  "
 +"\n  |                                                               |  "
 +"\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  "
 +"\n  |                                                               |  "
 +"\n  +                                                               +  "
 +"\n  |                                                               |  "
 +"\n  +                      Destination Address                      +  "
 +"\n  |                                                               |  "
 +"\n  +                                                               +  "
 +"\n  |                                                               |  "
 +"\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  "
 +"\n"
 +"\nDefinitions for components of the IPv6 header are listed below."
 +"\nThese are taken directly from RFC 1752, January 1995." 
 +"\n"
 +"\n   Version:                indicates the version of ip header "
 +"\n                           used in this datagram (ipv6: 0110)  "
 +"\n"
 +"\n   Flow Label:             may be used to request special handling "
 +"\n                           from routers "
 +"\n"
 +"\n   Payload Length:         length in octets of the remainder of the"    
 +"\n                           packet following the IPv6 header"
 +"\n"
 +"\n   Next Header:            Identifies the type of header immediately"
 +"\n                           following the IPv6 header.  This field uses"
 +"\n                           the same values as the IPv4 Protocol field."
 +"\n"
 +"\n   Hop Limit:              Same as IPv4 Time To Live. "
 +"\n"
 +"\n   Source address:         the 128-bit IPv6 address for the source host"
 +"\n                           (more about IP addresses below)"
 +"\n"
 +"\n   Destination address:    the 128-bit IPv6 address for the destination "
 +"\n                           host (more about IP addresses below)"
 +"\n"
 +"\n   Extension Headers:      PacketBuilder constructs an IPv6 packet that" 
 +"\n                           lacks optional Extension Headers.  These  "
 +"\n                           options are described in detail in RFC 1752."
 +"\n"
 +"\n"
 +"\n==================IP ADDRESSES========================================="
 +"\n"
 +"\nThe 32-bit IPv4 address is generally written in dotted decimal "
 +"\nformat: 4 decimal numbers separated by decimal points.  Each "
 +"\ndecimal number represents one octet of the address.  The 3-row"
 +"\ndisplay for the IPv4 address for hydra3a (128.169.94.133) is"
 +"\nshown below.  Each decimal number maps to one octet of the "
 +"\naddress.  The binary octets are shown in the lowest row and"
 +"\nare the binary equivalents of the decimal numbers in the "
 +"\nmiddle row.  The spaces between the octets are for display"
 +"\npurposes only.  The Internet Packet consists of a string "
 +"\nof 0's and 1's, no spaces allowed."
 +"\n"
 +"\n      IPV4source_______________________________ "
 +"\n      128_____   169_____   94______   133_____ "
 +"\n      10000000   10101001   01011110   10000101 "
 +"\n"
 +"\n"
 +"\nNote that the IPv4 binary address above is presented in "
 +"\nNetwork Byte Order.  All binary string data in PacketBuilder"
 +"\nis presented in Network Byte Order, because this is the  "
 +"\nconvention used in the Internet Protocols.  However, all users  "
 +"\nshould be aware that there is a second convention used by"
 +"\nthe IEEE, and sometimes called IEEE Byte Order.  These two"
 +"\nconventions are also called \"big-endian\" and \"little-endian\". "
 +"\nThe table below is adapted from RFC 1042 and should give a "
 +"\ngood picture of how the two conventions work."
 +"\n"
 +"\n  ----------------------------------------------------------  "
 +"\n                       little-      big-                      "
 +"\n                       endian       endian                    "
 +"\n"
 +"\n  Number       IEEE    IEEE         Internet        Internet  "
 +"\n               HEX     Binary       Binary          Decimal   "
 +"\n "
 +"\n  UI Op Code   C0      11000000     00000011          3       "
 +"\n  SAP for      55      01010101     10101010        170       "
 +"\n   SNAP "
 +"\n  XID          F5      11110101     10101111        175       "
 +"\n  XID          FD      11111101     10111111        191       "
 +"\n  TEST         C7      11000111     11100011        227       "
 +"\n  TEST         CF      11001111     11110011        243       " 
 +"\n  zero         00      10000000     00000001          1       "
 +"\n  ----------------------------------------------------------  "
 +"\n"
 +"\n"
 +"\nIPv6 addresses are also presented in Network Byte Order."
 +"\nThe 128-bit IPv6 address can also be written in dotted decimal"
 +"\nformat.  Since IPv6 is designed to be backward compatable with"
 +"\nIPv4, all IPv4 host addresses have valid IPv6 renderings.  To"
 +"\nchange an IPv4 address to an IPv6 address, add 96 0's to the"
 +"\nright side of the address.  RFC 1933 deals with address"
 +"\ntranslation issues between IPv4 and IPv6.  The illustration"
 +"\nbelow is from RFC 1933 and shows the preferred shorthand for"
 +"\nexpressing an IPv4 address in IPv6 compatable format." 
 +"\n"
 +"\n"
 +"\n   |              96-bits                 |   32-bits    |  "
 +"\n   +--------------------------------------+--------------+  "
 +"\n   |            0:0:0:0:0:0               | IPv4 Address |  "
 +"\n   +--------------------------------------+--------------+  "
 +"\n"
 +"\n"
 +"\nUsing this format, the shorthand for the IPv6 address for"
 +"\nhydra3a can be written:  0:0:0:0:0:0:128.169.94.133"
 +"\n"
 +"\nThe PacketBuilder 3-row display for the IPv6 address for "
 +"\nhydra3a is shown below."
 +"\n"
 +"\n IPV6source_____________________________________________________________________________________________________________________________________  "
 +"\n 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 0_______ 128_____ 169_____ 94______ 133_____  "
 +"\n 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 10101001 01011110 10000101  "
 +"\n"
 +"\nThe mapping of the three rows is exactly tha same as for IPv4, just "
 +"\nlonger, a lot longer."
 +"\n"
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");
        String s2 = new String
 ( "LLC Layer Documentation"
 +"\n"
 +"\nLLC stands for Logical Link Control."
 +"\nThe Logical Link Control Layer is the upper part"
 +"\n of the Data Link Layer."
 +"\n"
 +"\nThe illustration below is taken from RFC 1122 and shows the "
 +"\nrelationship between the LLC frame and the IP packet.  Note "
 +"\nthat the tcp/udp header and application data are here treated "
 +"\nas a single parcel of data.  The LLC software has no need"
 +"\nto know details about anything 2 layers up. "
 +"\n"
 +"\n      _______________________________________________   "
 +"\n     | LL hdr | IP hdr |         (data)              |  "
 +"\n     |________|________|_____________________________|  " 
 +"\n"
 +"\n      <---------- Frame ----------------------------->  "
 +"\n               <----------Packet -------------------->  "
 +"\n"
 +"\nThe important thing to remember is that there are 2 parts "
 +"\nto the LLC frame: "
 +"\n"
 +"\n          1. The LL header"
 +"\n          2. The IP packet (IP header + data)"
 +"\n"
 +"\nThe Data Link Layer is responsible for ensuring correct transmission of"
 +"\nan IP packet from one end point to the next.  The checksum (cyclic "
 +"\nredundancy check) is done in the MAC Layer (the lower part of the Data "
 +"\nLink Layer).  The LLC Layer identifies one Service Access Point for the"
 +"\nSource (SSAP) and one Service Access Point for the Destination (DSAP)."
 +"\nGenerally SSAP has the same value as DSAP, but this is not mandatory."
 +"\nThe Service Access Point is a number that the LLC uses to multiplex"
 +"\npacket data to the correct \"channel\" in the IP Layer.  This allows "
 +"\nthe same MAC software to be used to receive an IPv4 packet, an IPv6"
 +"\npacket, an ICMP packet, an ARP packet,  and so on."
 +"\n"
 +"\nIn PacketBuilder there is only one variable to set for LLC, the "
 +"\nEthertype value.  This single parameter identifies the upper layer" 
 +"\nprotocol that should be used to process the packet (in PacketBuilder,"
 +"\nipv4 or ipv6)."
 +"\n"
 +"\n The illustration below is the specification for the LLC header "
 +"\n as published in RFC 1042, February 1988."
 +"\n"
 +"\n Header Format"
 +"\n"
 +"\n ...--------+--------+--------+"
 +"\n            MAC Header        |               802.{3/4/5} MAC"
 +"\n ...--------+--------+--------+"
 +"\n"
 +"\n +--------+--------+--------+"
 +"\n | DSAP=K1| SSAP=K1| Control|                 802.2 LLC"
 +"\n +--------+--------+--------+"
 +"\n"
 +"\n +--------+--------+---------+--------+--------+"
 +"\n |Protocol Id or Org Code =K2|    EtherType    |     802.2 "
 +"\n +--------+--------+---------+--------+--------+     SNAP"
 +"\n"
 +"\n The K1 value is 170 (decimal). "
 +"\n The K2 value is 0 (zero). "
 +"\n The control value is 3 (Unnumbered Information). "
 +"\n"
 +"\n DSAP:	     destination service access point"
 +"\n"
 +"\n SSAP:	     source service access point"
 +"\n"
 +"\n Control:       one of three values"
 +"\n                UI (unnumbered info) a datagram packet"
 +"\n                XID (exchange id) a command/response packet"
 +"\n                TEST (test info) a test-connection packet"
 +"\n"
 +"\n Protocol ID:   indicates how Ethertype field is used"
 +"\n"
 +"\n Ethertype:     identifies next higher protocol layer"
 +"\n"
 +"\n"
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");
        String s1 = new String
 ( "MAC Layer Documentation                                         "
 +"\n"
 +"\nMAC stands for Medium Access Control. "
 +"\n"
 +"\nThe illustration below is not from RFC 1122, but is copied from "
 +"\nthe style of the other illustrations to show the encapsulation of " 
 +"\nthe LLC frame inside the MAC frame." 
 +"\n  ______________________________________________________________   "
 +"\n | MAC hdr | LLC hdr |       (data)               | MAC trailer |  "
 +"\n |_________|_________|____________________________|_____________|  "
 +"\n "
 +"\n <---------- MAC Frame ----------------------------------------->  "
 +"\n           <----------- LLC Frame ---------------->  " 
 +"\n"
 +"\n"
 +"\nIn a similar fashion, the next illustration shows the full"
 +"\nsuite of encapsulation of a tcp/ip packet.  This corresponds to"
 +"\nthe display in the scroll window at the bottom of the PacketBuilder"
 +"\nConstruction Window.  You will have to scroll through each individual"
 +"\nheader to see all the header fields. You will have to scroll through" 
 +"\nthe entire scroll window to see all the different headers.  But it"
 +"\nis all there, every single bit."
 +"\n"
 +"\n  ______________________________________________________________   "
 +"\n | MAC hdr | LLC hdr | IP hdr | TCP hdr | (data)  | MAC trailer |  "
 +"\n |_________|_________|________|_________|_________|_____________|  "
 +"\n "
 +"\n <-----------MAC Frame------------------------------------------>  "
 +"\n           <-----------LLC Frame------------------>  " 
 +"\n                    <-----IP Packet-------------->  " 
 +"\n                             <---TCP Segment----->  " 
 +"\n                                       <--data--->  " 
 +"\n"
 +"\n"
 +"\nThe term Medium in Medium Access control refers to the physical entity"
 +"\nwhich carries the electrons that are the signal.  Most LANs are wired"
 +"\ntogether with one of the following three: twisted pair (thin telephone"
 +"\nwires), coaxial cable(thick telephone wires), or optical fiber (Halsall,"
 +"\npage 275)."
 +"\n"
 +"\nBecause the Medium (Physical Layer) of a LAN must follow specific"
 +"\nstandards (protocols) each type of wire (including optical fiber)"
 +"\nhas a specific name.  A short list of examples is given below."      
 +"\n"
 +"\n    10BASE-5  -- Coaxial Cable (50 ohm)"
 +"\n    10BASE-2  -- Coaxial Cable (50 ohm)"
 +"\n    10BASE-T  -- unshielded twisted pair"
 +"\n    10BASE-FP -- 850-nm optical fiber pair"
 +"\n    OC-1      -- Optical Carrier (52 Mbits/sec)"
 +"\n    OC-3      -- Optical Carrier (155 Mbits/sec)"
 +"\n    Reference: Stallings, 1997, page 413."    
 +"\n"
 +"\nThe MAC Layer provides communication between the Physical Layer"
 +"\n(wires and voltages) and the Logical Link Control Layer (software)."
 +"\n"
 +"\nIn some discussions of protocols, the MAC and LLC Layers are lumped"
 +"\ntogether as the DATALINK LAYER, because the choice for MAC"
 +"\ngenerally locks in the choice for LLC. In the list provided below,"
 +"\neach MAC choice is shown with compatable LLC partner(s). Although "
 +"\nthe DIX Ethernet_II LLC header has been superceded by later IEEE"
 +"\nstandards, it remains as the default header on UNIX machines and"
 +"\nas such is very widely used."
 +"\n"
 +"\nBecause all hosts in a Local Area Network are connected to the same"
 +"\ncarrier (wires), hosts must take turns in utilization of shared"
 +"\nresources. Part of the business of Internet Protocols is to ensure"
 +"\nthat this sharing takes place in a fair and efficient manner."
 +"\nThis is accomplished by Access Control."  
 +"\n"
 +"\n"   
 +"\n      ============================================================="
 +"\n      MAC Layer Protocol Choices"
 +"\n"
 +"\n      1. Ethernet Bus (IEEE 802.2)"
 +"\n           a. Medium: 10BASE-5"
 +"\n                      or 10BASE-2"
 +"\n           b. Topology:  linear (also called bus)" 
 +"\n           c. All hosts connected to the same line(carrier)"
 +"\n           d. Access Control: by means of CSMA/CD "
 +"\n              (CSMA/CD is discussed below)" 
 +"\n           e. LLC:  DIX Ethernet_II LLC (IEEE 802.2)"
 +"\n                    or Ethernet_SNAP(IEEE 802.3)"
 +"\n"
 +"\n      2. Ethernet Token Ring (IEEE 802.5)"
 +"\n           a. Medium: 10BASE-T"
 +"\n           b. Topology:  single ring" 
 +"\n           c. All hosts connected to single ring(carrier)"
	  +"\n           d. Access Control: by means of possesion of token"
 +"\n           e. LLC: IEEE 802.5" 
 +"\n"
 +"\n      3. FDDI (Fiber Distributed Data Interface IEEE 802.5)"   
 +"\n           a. Medium: optical fiber "
 +"\n                      or Category 5 unshielded twisted pair"
 +"\n                      (telephone line that can handle 100 MHz)"
 +"\n           b. Topology:  double ring" 
 +"\n           c. All hosts connected to both rings(carriers)."
 +"\n              Signals travel in one direction on the inner ring,"
 +"\n              and in the opposing direction on the outer ring."
	  +"\n           d. Access Control: by means of possesion of token"
 +"\n           e. LLC: IEEE 802.5 LLC (Stallings 1993, page 365)"
 +"\n                   or IEEE 802.2 LLC (rfc 1188)"
 +"\n                   or IEEE 802.2 SNAP(rfc 1188)" 
 +"\n"
 +"\nWhether the network is ethernet bus, token ring, or FDDI, the"
 +"\nMAC Layer performs the same function:  receipt and sending of"
 +"\nindividual packets."
 +"\n"
 +"\nThe MAC Layer sees the most action of all the protocol layers,"
 +"\nsimply because it 'touches' all packets that pass by a host on "
 +"\na network, not just the ones meant for the local host.  Consider" 
 +"\nthe arrival of a packet to be analogous to a knock at the front"
 +"\ndoor.  The MAC Layer has to examine the visitor in order to" 
 +"\ndetermine whether or not to let him in.  What information is"
 +"\nneeded to make this decision?  The 48-bit destination and source" 
 +"\naddresses, which are found in the MAC header."
 +"\n"
 +"\nIn Packetbuilder, these are called the 'ethernet' addresses."
 +"\nThe PacketBuilder 3-row display for the ethernet address for"
 +"\nhydra3a (8:0:20:1c:5f:62) is shown below. "
 +"\n"
 +"\n    Ethernet source address___________________________________  "
 +"\n    8_______  0_______  20______  1c______  5f______  62______  "
 +"\n    00001000  00000000  00100000  00011100  01011111  01100010  "
 +"\n"
 +"\nThe 48-bit ethernet address is generally written as 6 hexadecimal "
 +"\nnumbers separated by colons.  Each hexadecimal number represents"
 +"\none octet of the address.  The binary octets are shown in the "
 +"\nlowest row and are the binary equivalents of the hexadecimal"
 +"\nnumbers in the middle row.  The spaces between the octets are"
 +"\nfor display purposes only.  The Internet Packet consists of a "
 +"\nstring of 0's and 1's, no spaces allowed."
 +"\n"
 +"\nWhen a simple host (also called a node) receives a packet, the first"
 +"\norder of business is to inspect the 48-bit destination host address."
 +"\nIf this address does not match the local physical address, the node"
 +"\nreleases the packet back to the network and processing is finished."
 +"\nIn case of an address match, the node sends the packet to the LLC "
 +"\nLayer to begin the process of reading the packet."
 +"\n"
 +"\nIf the node happens to be a bridge or a router, the newly received"
 +"\npacket will be sent to a higher layer for the decision process. In some"
 +"\nsystems, a routing decision can be made based upon the ethernet address."
 +"\nThis Layer 2 switching tends to be more efficient than IP (Layer 3)"
 +"\nswitching, but is not universally available.  See IP Layer for a"
 +"\ndiscussion of Layer 3 switching."
 +"\n"
 +"\n"
 +"\n==================================================================="
 +"\nEthernet Bus"
 +"\n"
 +"\nIn 1988, IEEE 802.3 Standard was released.  It describes Ethernet"
 +"\nframe format (MAC Layer) and Logical Link Control (LLC Layer). "
 +"\n Medium Access Control implements the Carrier-Sense-"
 +"\nMultiple-Access/Collision-Detect (CSMA/CD) scheme of packet"
 +"\ntransmission.  The CSMA/CD scheme is as follows:"
 +"\n"
 +"\n    CS (Carrier Sense) "
 +"\n       A node that has a packet to send listens to the line"
 +"\n       (aka the carrier) to ensure that the line is free."
 +"\n       If there is a signal on the line, the node waits."
 +"\n       If the line is free, packet transmission begins."
 +"\n"
 +"\n    MA (Multiple Access) "
 +"\n       Any node on the line is eligible to send or receive"
 +"\n       a packet.  This is analogous to the old-fashioned"
       	  +"\n       party-line telephones.  Note that on party-line, you"
 +"\n       would pick up the receiver, listen to make sure the"
 +"\n       line was free, then dial your number. If your listening"
 +"\n       revealed a call in progress, you would politely hang up"
 +"\n       and wait, since only a nosy gossip would be so rude as"
 +"\n       to continue listening!"
 +"\n"
 +"\n    CD (Collision Detect) "
 +"\n       While a node is sending a packet, it is also listening"
 +"\n       to the line to make sure that transmission is not garbled"
 +"\n       by some other signal.  (What could be the source of this"
 +"\n       other signal? Perhaps some other node listened for a"
 +"\n       free line and began transmission at precisely the same"
 +"\n       moment.  The signals would then collide.)  In the case"
 +"\n       of garbling, the sending node will wait a RANDOM length"
 +"\n       of time before attempting retransmission.  The wait time"
 +"\n       must be random, or competing stations might be attempting"
 +"\n       to retransmit in a doomed lockstep, over and over."   
 +"\n"
 +"\n"
 +"\n==================================================================="
 +"\nToken Ring"
 +"\n"
 +"\nA host wishing to send a packet must wait for a free token. When"
 +"\nthe free token arrives, the sending host 'seizes' the token, sets"
 +"\nthe token bit to 1 to indicate token-in-use, appends the rest of"
 +"\nthe packet, and sends the token-plus-packet out on the network."
 +"\nDepending on local adminstrative rules, a station may be allowed"
 +"\nto send only one packet before releasing the token or a station "
 +"\nmay be allowed to send as many packets as needed.  There are also "
 +"\noptions for reserving the token or sending packets on a priority"
 +"\nbasis. The token frame and packet frame are shown below."
 +"\n"     
 +"\n    Token Frame for Token Ring"     
 +"\n"     
 +"\n      1 byte   1 byte   1 byte"     
 +"\n    |--------|--------|--------|"     
 +"\n    |   SD   |   AC   |   FC   |"     
 +"\n    |--------|--------|--------|"     
 +"\n"     
 +"\n    Packet Frame for Token Ring"     
 +"\n"     
 +"\n      1 byte   1 byte   1 byte   6 bytes  6 bytes  var. len.   4 bytes  1 byte   1 byte"     
 +"\n    |--------|--------|--------|--------|--------|-----------|--------|--------|--------| "     
 +"\n    |   SD   |   AC   |   FC   |   DA   |   SA   | DataField |  FCS       ED   |   FS   | "    
 +"\n    |--------|--------|--------|--------|--------|-----------|--------|--------|--------| "     
 +"\n"     
 +"\n     SD  = start delimeter"     
 +"\n     AC  = access control"     
 +"\n     FC  = frame control"     
 +"\n     DA  = destination address"     
 +"\n     SA  = source address"     
 +"\n     DataField = the LLC packet and all it encapsulates"     
 +"\n     FCS = a 32 bit frame check sequence"     
 +"\n     ED  = end delimeter"     
 +"\n     FS  = frame status"     
 +"\n"     
 +"\n     Access Control Field for Token Ring"     
 +"\n     (each cell represents one bit)"     
 +"\n"     
 +"\n     +---+---+---+---+---+---+---+---+"     
 +"\n     | P | P | P | T | M | R | R | R |"     
 +"\n     +---+---+---+---+---+---+---+---+"     
 +"\n"     
 +"\n     P  =  priority bit"     
 +"\n     T  =  token bit (1=in use; 0=free;)"     
 +"\n     M  =  monitor bit"     
 +"\n     R  =  reservation bit"     
 +"\n"     
 +"\n     Reference: Stallings, 1997, page 415; "     
 +"\n                Halsall, 1996, page 296;"     
 +"\n"
 +"\n==================================================================="
 +"\nFDDI"
 +"\n"     
 +"\n    Token Frame for FDDI"           
 +"\n"     
 +"\n        8 bytes    1 byte   1 byte   1 byte"     
 +"\n    |------------|--------|--------|--------|"     
 +"\n    |  Preamble  |   SD   |   FC   |   FS   |"     
 +"\n    |------------|--------|--------|--------|"     
 +"\n"     
 +"\n    Packet Frame for FDDI"           
 +"\n"     
 +"\n        8 bytes    1 byte   1 byte   6 bytes  6 bytes  var. len.   4 bytes  1 byte   1 byte"     
 +"\n    |------------|--------|--------|--------|--------|-----------|--------|--------|--------| "     
 +"\n    |  Preamble  |   SD   |   FC   |   DA   |   SA   | DataField |  FCS   |   ED   |   FS   | "    
 +"\n    |------------|--------|--------|--------|--------|-----------|--------|--------|--------| "     
 +"\n"     
 +"\n     Preamble = 64 bit synchronization sequence"     
 +"\n     SD  = start delimeter"     
 +"\n     FC  = frame control"     
 +"\n     DA  = destination address"     
 +"\n     SA  = source address"     
 +"\n     DataField = the LLC packet and all it encapsulates"     
 +"\n     FCS = a 32 bit frame check sequence"     
 +"\n     ED  = end delimeter"     
 +"\n     FS  = frame status"     
 +"\n"
 +"\n     Reference: Stallings, 1997, page 420; "     
 +"\n                Halsall, 1996, page 296;"     
 +"\n==================================================================="
 +"\n"
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");
        String sa = new String
 ( "About PacketBuilder"
 +"\n"
 +"\nPacketBuilder by Cricket Haygood Deane, copyright 1998."
 +"\nSoftware Package written in Java version 1.1.2."
 +"\nProject in lieu of thesis, submitted: July 23, 1998."
 +"\n"
 +"\nCommittee:  Dr. David Straight (chair)  "
 +"\n            Dr. Micah Beck"
 +"\n            Dr. Jim Plank"
 +"\n"
 +"\nPacketBuilder is an interactive tool that provides a user "
 +"\nfriendly introduction to the Internet Protocols. "
 +"\n"
 +"\nPacketBuilder attempts to answer the question posed (many times)"
 +"\nby Dr. Micah Beck:  \"What does the frame look like?\" "
 +"\n"
 +"\nThe World Wide Web was invented by particle physicists in "
 +"\nEurope who were based at several different universities, but"
 +"\nworking on closely related projects. They all thought it would"
 +"\nbe useful to have instantaneous updates on work at remote sites."
 +"\n(See http://www.cern.ch/CERN/ for complete information about"
 +"\nthe early development of the World Wide Web.)"
 +"\n"
 +"\nToday the Internet has moved from being a special tool for "
 +"\nparticle physicists to being a part of daily life, just as "
 +"\nimportant to communication as the telephone."  
 +"\n"
 +"\nUnderstanding how Internet Protocols work will help the user"
 +"\nunderstand how the Internet works.  The protocols themselves"
 +"\nare simple and straightforward, but even the phrase"
 +"\n\"Internet Protocols\" has a daunting ring to it.  There are"
 +"\nseveral barriors that prevent students from getting started"
 +"\nwith Internet Protocols, including:"
 +"\n"
 +"\n   1. a mountain of terminalogy (unfortunately necessary)"
 +"\n   2. a few math tricks (decimal/hexadecimal/binary conversions)"
 +"\n   3. vital information distributed over many sources"
 +"\n"
 +"\nPacketBuilder attempts to solve these problems by"
 +"\n"
 +"\n   1. a 3-row display format in the final panel display"
 +"\n      at the bottom of the Construction Window"
 +"\n"
 +"\n          row 1: the label (official name from protocol)"
 +"\n          row 2: the numeric value (in decimal or hex) "
 +"\n          row 3: the numeric value (binary string, broken"
 +"\n                 into octets) "
 +"\n"
 +"\n   2. providing all of the information needed to build a simple"
 +"\n      packet in the PacketBuilder software"
 +"\n"
 +"\nPacketBuilder helps the user to build an Internet Packet with"
 +"\nthe correct encapsulation the first time he uses it. There is"
 +"\nno need to look up anything or write a single word of code.  The" 
 +"\nstructure of this packet is shown below. (Illustration adapted"
 +"\nfrom RFC 1122.)"
 +"\n"
 +"\n  ______________________________________________________________   "
 +"\n | MAC hdr | LLC hdr | IP hdr | TCP hdr | (data)  | MAC trailer |  "
 +"\n |_________|_________|________|_________|_________|_____________|  "
 +"\n "
 +"\n <-----------MAC Frame------------------------------------------>  "
 +"\n           <-----------LLC Frame------------------>  " 
 +"\n                    <-----IP Packet--------------->  " 
 +"\n                             <----TCP Segment----->  " 
 +"\n                                       <---data--->  " 
 +"\n"
 +"\n"
 +"\nPacketBuilder takes care of addresses and labels and putting"
 +"\ncomponents in the correct order.  There is logic to ensure"
 +"\ncorrect use of the IP LOOPBACK address and MAC network gateway"
 +"\naddress. PacketBuilder does not take care of option settings."
 +"\n(i.e. PacketBuilder does not prevent setting all tcp-flags"
 +"\nequal to 1 at the same time.) The serious student will have to"
 +"\nread about giving valid values to the different options."
 +"\n"
 +"\nPacketBuilder presents a limited number of host addresses,"
 +"\na simplified protocol stack, and only 2 or 3 choices of protocol "
 +"\nat each layer.  This simplicity should help the student to"
 +"\ngrasp the basic concepts of Internet Protocols."
 +"\n"
 +"\nIn the documentation pages, I present much of the same information"
 +"\nin a traditional text format.  I borrow heavily from the online"
 +"\nRFCs.  This should enable the student to move successfully from "
 +"\nPacketBuilder to more advanced topics in network programming."
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n"
 +"\n "
 +"\n End"
 +"\n ");
        String sb = new String
 ( "Bibliography"
 +"\n"
 +"\nJava references:  JAVA is evolving so quickly that the jdk1.1.2"
 +"\nthat I used for this software has been superceded by jdk1.2. "
 +"\nThat means all of my JAVA references are out of date.  I will"
 +"\ngive some pointers on how to get at the most up-to-date sources"
 +"\nof JAVA information.  All of them are on the web."
 +"\n"
 +"\n      http://java.sun.com/      The SunJava Homepage"
 +"\n"
 +"\n"
 +"\nRFC's: Since the online RFCs are such an important resource,  "
 +"\n   a few online addresses are in order.  The best online source "
 +"\n   for RFCs that I have found is at the \"RFC HyperText Archive\" "
 +"\n   Hosted by SunSITE DK at:  " 
 +"\n"
 +"\n              http://sunsite.auc.dk/RFC/   "
 +"\n"
 +"\n   Some of the earlier (below 1000) RFCs are not available at the"
 +"\n   above address.  I found a good selection of \"important early\" "
 +"\n   RFCs at:  "  
 +"\n"
 +"\n              http://pullinaj1.newi.ac.uk/RFC/list.htm  "
 +"\n"
 +"\n"
 +"\nNetwork Protocol references:  This list contains useful sources "
 +"\n   of information about Internet Protocols.  Part of the challenge "
 +"\n   of this project has been the distributed nature of the "
 +"\n   references on the Internet Protocol suite.  This list should"
 +"\n   provide a good starting point for newcomers to the subject."
 +"\n"
 +"\n"
 +"\n Black, U. 1993. \"Data Link Protocols,\" Prentice-Hall, "
 +"\n	Englewood Cliffs, New Jersey."
 +"\n"
 +"\n Black, U. 1998. \"TCP/IP and Related Protocols,\" McGraw-Hill,"
 +"\n	New York, N.Y."
 +"\n"
 +"\n Braden, R. T., ed. 1989. \"Requirements for Internet Hosts -- "
 +"\n	Communication Layers,\" RFC 1122, 116 pages (Oct)."
 +"\n"
 +"\n Braden, R.T., Borman, D.A., and Partridge, C. 1988. \"Computing the "
 +"\n	Internet Checksum,\" RFC 1071, 24 pages (Sept.)."
 +"\n"
 +"\n Crawford, M. 1996. \"A Method for the Transmission of IPv6 Packets "
 +"\n 	over Ethernet Networks,\" RFC 1972, 4 pages (Aug.)."
 +"\n"
 +"\n Crawford, M. 1996. \"A Method for the Transmission of IPv6 Packets "
 +"\n 	over FDDI Networks,\" RFC 2019, 6 pages (Oct.)."
 +"\n"
 +"\n Deering, S.E. and Hinden, R. 1995. \"Internet Protocol, Version 6 "
 +"\n   (IPv6) Specification,\" RFC 1883, 37 pages (Dec.)."
 +"\n"
 +"\n Ford, M., Lew, H. K., Spanier, S., and Stevenson, T. 1997."
 +"\n	\"Internetworking Technologies Handbook,\" Cisco Press,"
 +"\n	Indianapolis, Ind."
 +"\n"
 +"\n Gilligan, R. and Nordmark, E.  1996. \"Transition Mechanisms "
 +"\n   for IPv6 Hosts and Routers\", RFC 1933, 22 pages (Apr.)."
 +"\n"
 +"\n Halsall, F. 1996. \"Data Communications, Computer Networks, "
 +"\n 	and Open Systems,\" Fourth Edition, Addison-Wesley, "
 +"\n	Reading, Mass."
 +"\n"
 +"\n Katz, D. 1993. \"Transmission of IP and ARP over FDDI Network,\" "
 +"\n	RFC 1390, 11 pages (Jan.)."
 +"\n"
 +"\n Miller, M. A. 1996. \"Troubleshooting TCP/IP: Analyzing the "
 +"\n	Protocols of the Internet,\" Second Edition, M&T Books,"
 +"\n	New York, N.Y."
 +"\n"
 +"\n Perlman, R. 1992. \"Interconnections: Bridges and Routers\","
 +"\n 	Addison-Wesley, Reading, Mass."
 +"\n"
 +"\n Postel, J.B. 1980. \"User Datagram Protocol,\" RFC 768, "
 +"\n	3 pages (Aug.)."
 +"\n"
 +"\n Postel, J.B., ed. 1981. \"Internet Protocol,\" RFC 791, "
 +"\n	45 pages (Sept.)"
 +"\n"
 +"\n Postel, J.B., ed. 1981. \"Transmission Control Protocol,\" RFC 793, "
 +"\n	85 pages (Sept.)"
 +"\n"
 +"\n Postel, J.B., and Reynolds, J. 1988. \"A Standard for the"
 +"\n   Transmission of IP Datagrams over IEEE 802 Networks,\" RFC 1042,"
 +"\n   15 pages (Feb.)"
 +"\n"
 +"\n"
 +"\n Rago, S.A. 1993. \"UNIX System V Network Programming.\" "
 +"\n	Addison-Wesley, Reading, Mass."
 +"\n"
 +"\n Stallings, W. 1993. \"Networking Standards: A Guide to OSI,"
 +"\n	ISDN, LAN, and MAN Standards,\" Addison-Wesley, Reading, Mass."
 +"\n"
 +"\n Stallings, W. 1997. \"Data and Computer Communications,\" Fifth "
 +"\n	Edition, Prentice Hall, Englewood Cliffs, New Jersey."
 +"\n"
 +"\n Stallings, W. 1998. \"High-Speed Networks: TCP/IP and ATM Design"
 +"\n	Principles,\" Prentice Hall, Englewood Cliffs, New Jersey."
 +"\n"
 +"\n Stevens, W.R. 1998. \"TCP/IP Illustrated, Vol. 1: The Protocols,\" "
 +"\n	Prentice Hall, Englewood Cliffs, New Jersey."
 +"\n"
 +"\n Stevens, W.R. 1998. \"Unix Network Programming,\" Second Edition, "
 +"\n	Prentice Hall, Englewood Cliffs, New Jersey."
 +"\n"
 +"\n Tanenbaum, A. U. 1996. \"Computer Networks,\" Third Edition, "
 +"\n	Prentice Hall, Englewood Cliffs, New Jersey."
 +"\n"
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");
        String sACK = new String
 ( "Acknowlegements"
 +"\n"
 +"\nPacketBuilder would never have been started, much less finished without"
 +"\nthe support of a great many people.  I thank the main players here."
 +"\n"
 +"\nDr. Gordon Sherman, for giving me my first job in computers in 1966."
 +"\n"
 +"\nDr. David Straight, for encouraging me to come back to school."
 +"\n"
 +"\nDr. Micah Beck, for always asking \"What does the frame look like?\""
 +"\n         PacketBuilder is an attempt to answer this question."
 +"\n"
 +"\nDr. Jim Plank, for providing socketfun, which first sparked my interest "
 +"\n         in network programming."
 +"\n"
 +"\nMs. Wallace Mayo, for teaching me how to design effective "
 +"\n         educational tools."
 +"\n"
 +"\nMs. Irina Kolesnikova, for help with Russian Hello."
 +"\n"
 +"\nMr. Philippe Hanset, for help with French Hello."
 +"\n"
 +"\nMr. Bill Deane, for putting up with me."  
 +"\n"
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n "
 +"\n End"
 +"\n ");


        switch(index) {

        case 0: {//no action -- default text
        whitepaper.setText(intro);
        break;}

        case 1: {//About PacketBuilder
        whitepaper.setText(sa);
        break;}
 
        case 2: {//Step-by-step Instructions
        whitepaper.setText(instr);
        break;}

        case 3: {//User Data Documentation
        whitepaper.setText(s5);
        break;}
 
        case 4: {//Transport Layer Documentation
        whitepaper.setText(s4);
        break;}
 
        case 5: {//IP Layer Documentation
        whitepaper.setText(s3);
        break;}
 
        case 6: {//Logical Link Control Documentation
        whitepaper.setText(s2);
        break;}
 
        case 7: {//Media Access Control Documentation
        whitepaper.setText(s1);
        break;}
 
        case 8: {//Bibliography
        whitepaper.setText(sb);
        break;}
 
        case 9: {//Acknowlegements
        whitepaper.setText(sACK);
        break;}
 
        }//end switch
     

   }//end itemStateChanged(itemEvent e)

}//end setWhitePaperDisplay class

//==========================================================
//WindowCloser method adapted from Deitel and Deitel, 1997
//"JAVA How to Program", page 603.

public class CloseWindow extends WindowAdapter {
  public void windowClosing(WindowEvent e) {
  e.getWindow().setVisible(false);
  }//end method windowClosing()
}//end class CloseWindow


}//end PBdoc class
