/d1/workarea/dlxs/text/tel/dothis

FIRST: (this is my guess of what comes before SECOND: below)


	---------chd explain---------------------------------
	move all done files to /done!!!!
	clean out REPAIR directories if you want.

	run perl /d1/workarea/dlxs/telfiles/pickupTimeDirTest
	to check that you have cleaned out these directories

	run perl /d1/workarea/dlxs/telfiles/pickupTime
	to pick up the new batches

	Also, make sure you have put a copy of linkfile into
	done/xlinkfile BEFORE you pickup.  This will make it
	easier to rollback linkfile if needed.
	-----end chd explain---------------------------------



SECOND:  Look for duplicates, that need to be reworked using existing pids... and removing old version

1)put xml files in typed,ocr, notext mods folder, access images in jpgs folder
	---------chd explain---------------------------------
	This all should be done by pickupTime

	02/xml/* => ocr/mods/
	03/xml/* => typed/mods/
	04/xml/* => notext/mods/
	
	02/JPEG/* => ocr/jpgs/
	03/JPEG/* => typed/jpgs/
	04/JPEG/* => notext/jpgs/

	At this point run rep.py to get rid of annoying \n in mods files

	python rep.py notext/mods/ r1
	python rep.py ocr/mods/    r1
	python rep.py typed/mods/  r1

	Corrections are in r1 directories.  Look at them if unsure.
	When satisfied, move to one dir up and rmdir r1

	mv notext/mods/r1/* notext/mods/
	mv ocr/mods/r1/*    ocr/mods/
	mv typed/mods/r1/*  typed/mods/
	
	rmdir notext/mods/r1
	rmdir ocr/mods/r1
	rmdir typed/mods/r1/
	-----end chd explain---------------------------------

2) chkfiles  # makes sure you have a jpeg for each one referenced
     # also creates  file "howmany" that tells me how many pages I have for each one.
#3)run chkid to make sure internal id matches file name
#  and to verify you don't have 2 files with the same name
4) run modsTC > checkme

	---------chd explain---------------------------------
	before modsTC,
	make sure you have copied /d1/workarea/dlxs/text/tel/linkfile 
		to done/xlinkfile/linkfile_before_date
		and put a note at the bottom
	Then, when you have errors gone and run modsTC, 
		copy  /d1/workarea/dlxs/text/tel/linkfile
		to done/xlinkfile/linkfile_after_date
		and put a note at the bottom

	Because later in case of disaster, you have a backup of linkfiles
		for information on what you have done.

	run modsTCerrorTest - same as modsTC but no write to linkfile
		no write to locserve.y2008 table

	before modsTCerrorTest, clean out those annoying "\n" things
	use python rep.py on
		notext/mods
		ocr/mods
		typed/mods


	RUN modsTCerrorTest first
	perl modsTCerrorTest >checkme_date

	This is a version that will not write to linkfile or
	to the locserv database table.  
	It will put things in the same directories as modsTC.

	If you get an error, fix the error and run modsTCerrorTest again.
	And again.
	And again.
	Sorry.
	At least you do not have to revise linkfile and locserv each time.

	If you have dire problems, do this in the REPAIR directory
	There is a complete shadow of directory structures in REPAIR
		newmods
		modsbib
		search
		tei
		notext/mods
		ocr/mods
		typed/mods
		and a bunch of sub directories

	Find errors first with modsTCerrorTest.
	A bogus error appears in the checkme file "ERROR:  NO PAGES!!!
	Delete this phrase then search on ERROR to find real errors.

	Fix errors second.
	Run the real modsTC third - point of no return because you have
	written to linkfile and locserve database.

	***to rollback, get the most recent linkfile from done/xlinkfile/
	******and delete the new rows from locserv.y2008 table


	modsTCerrorTest will put tei into tei directories
	for fixing tei, you will want to


	
	-----end chd explain---------------------------------
check checkme for "ERROR"
grep % newmods/*/*
grep x0 newmods/*/*
grep x1 newmods/*/*
grep x2 newmods/*/*
hexmess

	---------chd explain---------------------------------
	TEI
	TEI
	TEI

	[root@diglib2 tel]# ls tei
	notext		loaded here by modsTC,   
	notextCurr 	cp notext/* notextCurr/ to run pb_notext2.py 
	notextPB  	holds output of pb_notext2.py
	notextPrev 	previous tei/notext/ final files
	transform_tei expects to have all files in tei/notext so
			cp notextPrev/* notext/
			cp notextPB/*   notext/ (this overwrites the ones loaded to modsTC)
			when you are done, tei/notext/ should be empty
			/bin/mv  notext/* notextPrev/ (this overwrites the earlier ones)
			and then copy to done
			/bin/cp  notextPrev/* done/tei/notext/

	when you are done
	notext	  	should be empty
	notextCurr 	should be empty
	notextPB   	should be empty
	notextPrev 	should have all the files

	ocr  		loaded here by modsTC
	ocrCurr  	cp ocr/* ocrCurr/ to run pb_ocr2.py
	ocrPB 		output of pb_ocr2.py 
	ocrPrev  	previous tei/notext/ final files
	transform_tei expects to have all files in tei/ocr so
			cp ocrPrev/* ocr/
			cp ocrPB/*   ocr/ (this overwrites the ones loaded to modsTC)
			when you are done, tei/ocr/ should be empty
			/bin/mv  ocr/* ocrPrev/ (this overwrites the earlier ones)
			and then copy to done
			/bin/cp  ocrPrev/* done/tei/ocr/

	when you are done
	ocr	  	should be empty
	ocrCurr 	should be empty
	ocrPB   	should be empty
	ocrPrev 	should have all the files

	typed		loaded here by modsTC  
	typedCurr 	cp typed/* typedCurr/ to run pb_typed2.py 
	typedPB 	holds output of py_typed2.py 
	typedPrev       prev tei/typed/ final files
	transform_tei expects to have all files in tei/typed so
			cp typedPrev/* typed/
			cp typedPB/*   typed/ (this overwrites the ones loaded to modsTC)
			when you are done, tei/ocr/ should be empty
			/bin/mv  typed/* typedPrev/ (this overwrites the earlier ones)
			and then copy to done
			/bin/cp  typedPrev/* done/tei/typed/

	when you are done
	typed	  	should be empty
	typedCurr 	should be empty
	typedPB   	should be empty
	typedPrev 	should have all the files

	-----end chd explain---------------------------------


4.5) copy done tei into tei directories if they're not there
("there" is the tei directories into which you are writing:  
within /d1/workarea/dlxs/text/tel/, subdirectories tei/typed, tei/ocr, tei/notext)

5) run transform on the new TEI AFTER ADDING PB TABS with pb_*2.py
	
	----------------------chd explain------------------
	python pb_notext2.py ( input is tei/notextCurr, output is tei/notextPB)
	python pb_ocr2.py    ( input is tei/ocrCurr,    output is tei/ocrPB   )
	python pb_typed2.py  ( input is tei/typedCurr,  output is tei/typedPB )

	check for "<PB" and "<pb" in a directory
	grep -ci "<PB" tei/notext/* > grep_5notext


	Do this when happy with tei/*PB/ output
	/bin/mv tei/notextPB/*   tei/notext/
	/bin/mv tei/ocrPB/*      tei/ocr/
	/bin/mv tei/typedPB/*    tei/typed/

        /bin/cp tei/notextPrev/* tei/notext/
        /bin/cp tei/ocrPrev/*    tei/ocr/
        /bin/cp tei/typedPrev/*  tei/typed/



	
	perl tei_transform   (input is tei/notext, output is tei_output/notext)
			     (input is tei/ocr,    output is tei_output/ocr   )
			     (input is tei/typed,  output is tei_output/typed )


	What happens........
	[root@diglib2 tel]# perl tei_transform
	outputfilename is vvo.xml
	outfile is /d1/workarea/dlxs/text/tel/tei_output/ocr/vvo.xml
	completed transforming 628 files for directory /d1/workarea/dlxs/text/tel/tei/ocr/  
	outputfilename is vvt.xml
	outfile is /d1/workarea/dlxs/text/tel/tei_output/typed/vvt.xml
	completed transforming 771 files for directory /d1/workarea/dlxs/text/tel/tei/typed/  
	outputfilename is vvb.xml
	outfile is /d1/workarea/dlxs/text/tel/tei_output/notext/vvb.xml
	completed transforming 555 files for directory /d1/workarea/dlxs/text/tel/tei/notext/ 


	----------------------chd explain------------------

6) cat tei_validate and run that command to validate
7)check ./output/arrt.errors 
 ls -lai output/*/*errors
	----------------------chd explain------------------

	run tei_transform on new TEI
	The output from this program goes to tei_output

	There are 3 lines in the file named tei_validate.
 	nsgmls -s -f ./tei_output/typed/vvt.errors /d1/dlxs/prep/v/vvt/vvt.inp output/typed/vvt.xml
 	nsgmls -s -f ./tei_output/ocr/vvo.errors /d1/dlxs/prep/v/vvo/vvo.inp output/ocr/vvo.xml
 	nsgmls -s -f ./tei_output/notext/vvb.errors /d1/dlxs/prep/v/vvb/vvb.inp output/notext/vvb.xml

	perl tei_transform puts output in tei_output
	ls -l tei_output/*/vv*

	There are 3 lines in the file named tei_validate.
 	nsgmls -s -f ./tei_output/typed/vvt.errors /d1/dlxs/prep/v/vvt/vvt.inp output/typed/vvt.xml
 	nsgmls -s -f ./tei_output/ocr/vvo.errors /d1/dlxs/prep/v/vvo/vvo.inp output/ocr/vvo.xml
 	nsgmls -s -f ./tei_output/notext/vvb.errors /d1/dlxs/prep/v/vvb/vvb.inp output/notext/vvb.xml
		
	The missing step 8.

	modsTC does not write the pb tags into the tei output.
	So before running tei_transform, you have to fix this problem.


	----------------------chd explain------------------


9)For textclass:

 /bin/cp tei_output/typed/vvt.xml  /d1/dlxs/obj/v/vvt/.
 /bin/cp tei_output/notext/vvb.xml /d1/dlxs/obj/v/vvb/.
 /bin/cp tei_output/ocr/vvo.xml    /d1/dlxs/obj/v/vvo/.

cp ocr/jpegs/*     /d1/dlxs/obj/v/vvo/JPG/.
cp typed/jpegs/*   /d1/dlxs/obj/v/vvt/JPG/.
cp notext/jpegs/*  /d1/dlxs/obj/v/vvb/JPG/.

AND copy the subfiles (constitutent xml files) to /d1/dlxs/prep/v/vv_/subfiles
  /bin/cp tei_output/typed/*0000.xml   /d1/dlxs/prep/v/vvt/subfiles/.
  /bin/cp tei_output/ocr/*0000.xml     /d1/dlxs/prep/v/vvo/subfiles/.
  /bin/cp tei_output/notext/*0000.xml  /d1/dlxs/prep/v/vvb/subfiles/.

10) then go to /d1/dlxs/bin/v/vv_ and run:
11) make convert
12) make nodefy (not working. why?  instead:
	---------chd explain---------------------------------
	nodefy contains 3 lines that are specific to if you
	are in vvb, vvo, or vvt

	vi /d1/dlxs/bin/v/vvb/make_nodefy

 	perl ./tei2text /d1/dlxs/obj/v/vvb/vvb.xml /d1/dlxs/obj/v/vvb/
 	perl ./nodefy /d1/dlxs/obj/v/vvb/vvb.xml
 	mv  /d1/dlxs/obj/v/vvb/vvb.xml.noded  /d1/dlxs/obj/v/vvb/vvb.xml

	vi /d1/dlxs/bin/v/vvo/make_nodefy

	perl  ./tei2text /d1/dlxs/obj/v/vvo/vvo.xml /d1/dlxs/obj/v/vvo/
	perl  ./nodefy /d1/dlxs/obj/v/vvo/vvo.xml
	mv  /d1/dlxs/obj/v/vvo/vvo.xml.noded  /d1/dlxs/obj/v/vvo/vvo.xml

	vi /d1/dlxs/bin/v/vvt/make_nodefy

	perl ./tei2text /d1/dlxs/obj/v/vvt/vvt.xml /d1/dlxs/obj/v/vvt/
	perl ./nodefy /d1/dlxs/obj/v/vvt/vvt.xml
	mv  /d1/dlxs/obj/v/vvt/vvt.xml.noded  /d1/dlxs/obj/v/vvt/vvt.xml
	-----end chd explain---------------------------------

   cat make_nodefy
   cut and paste those commands into commandline.)
13) if you changed mappings or regions, do:
  make singledd
  make sgml
  make post
14) index
15) make a release to production

	make sure jpegs are in place

16)copy new xml/sgml into /d1/dlxs/prep/v/vv_ (needed for pageview)
/bin/cp ../../../obj/v/vvb/vvb.xml ../../../prep/v/vvb/vvb.xml
/bin/cp ../../../obj/v/vvt/vvt.xml ../../../prep/v/vvt/vvt.xml
/bin/cp ../../../obj/v/vvo/vvo.xml ../../../prep/v/vvo/vvo.xml


17) run make pageview from each bin directory 
	---------chd explain---------------------------------
	After you run index, 




	-----end chd explain---------------------------------

18) cd to idx/WW and run make all (wordwheel) for each collection
 and go on with the textclass stuff
( if you've set up browsing, run that software.)
--------------------------------------------------------
From: Deridder, Jody L
Sent: Saturday, May 10, 2008 10:53 AM
To: Deane, Christine Haygood
the #18 - cd to idx/WW and run make all (wordwheel) for each collection line
means:
cd /d1/dlxs/idx/v/vvo/WW
make all
cd /d1/dlxs/idx/v/vvt/WW
make all
cd /d1/dlxs/idx/v/vvb/WW
make all
 --------------------------------------------------------


for bib class:
separate out the newmods from institution 0012 and put in spc directory.
/bin/mv newmods/ocr/0012* spc/mods/ocr/.
/bin/mv newmods/typed/0012* spc/mods/typed/.
/bin/mv newmods/notext/0012* spc/mods/notext/.

copy modsbib and search files from 0012 there also, for changes.
("there" is the spc subdirectory, /d1/workarea/dlxs/text/tel/spc/ )
/bin/mv modsbib/0012* spc/modsbib/.
/bin/cp search/0012* spc/modssearch/.

/bin/cp modsbib/* /d1/workarea/dlxs/bib/mods/vv/xml

for search:
/bin/cp search/* /d1/workarea/dlxs/bib/search/vv/xml/

You will go there to put all the search and mods files from different directories up.
("there" is  /d1/workarea/dlxs/bib/mods/vv/xml and /d1/workarea/dlxs/bib/search/vv/xml/)

 chown diglib */minithumbs/*
scp */minithumbs/*jpg  diglib@diglib.lib.utk.edu:/d1/dlxs/web/thumbs/vv/.
diglib/bn78gh

(need these for search display;  this will fail if the source and target directories and files
are not owned by diglib)


AFTER COMPLETING ALL COLLECTIONS from this pickup, go to /d1/workarea/telfiles
and run "listfiles" and send Cricket the resulting list.  It runs off the newmods
directory.  This must be done BEFORE moving the newmods to spc/mods.


do NOT run infotrack on these yet, as we need to relate them to their EADs,  
and alter them for crosslinking.

hopefully you have all new dlc files in one directory alone.
point infotrack at this directory and run it, to put info on files into
InfoTrack database.  then copy new stuff to store1.

For preservation files: 
For mods, run the scripts in the bib/mods/vv directory.
For Tei, run preserveTEI


19) for search stuff:
#put mini thumbs in /d1/dlxs/web/vv/thumbs/ 
/bin/cp search/* /d1/workarea/dlxs/bib/search/vv/xml/.
cd /d1/workarea/dlxs/bib/search/vv/
cat opensearch xml/* closesearch >  vvs-bib.xml
cp vvs-bib.xml /d1/dlxs/prep/v/vvs-bib/.

cd /d1/dlxs/prep/v/vvs-bib/
do bib class setup  (run transform, and copy xml to obj directory
go to /d1/dlxs/idx/v/vvs-bib
run: make all
make sure it's in the httpd conf directory, restart if adding
release to production

20)  for modsbib to OAI:  (get all the modsbib from here, image singles & multiples)
mv modsbib/0012* spc/modsbib/.  (we don't want the SPC files in VV OAI.  they go with their own.)

/bin/cp modsbib/* /d1/workarea/dlxs/bib/mods/vv/xml/.
cd /d1/workarea/dlxs/bib/mods/vv/
fixSubjectsBib
cat openbib newSubxml/* closebib >  vvs-mods.xml
cp vvs-mods.xml /d1/dlxs/prep/v/vvs-mods/.

cd /d1/dlxs/prep/v/vvs-mods/
do bib class setup  (run transform, and copy xml to obj directory
go to /d1/dlxs/idx/v/vvs-mods
run: make all
make sure it's in the httpd conf directory, restart if adding
release to production

21) test in OAI

22) check everything
23) run infotrack
24) copy stuff to diglib
25) copy stuff to store2
26) move everything to ./done/
